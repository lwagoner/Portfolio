import statsmodels.api as sm
import patsy as pt
import pandas as pd
import numpy as np
import plotly.express as px
import statsmodels.tsa.stattools as st

data = pd.read_csv("https://raw.githubusercontent.com/dustywhite7/Econ8310/master/AssignmentData/assignment1.csv")

# ARIMAX
eqn = "trips ~ C(hour) + " + "day + C(month)"
        
y, x = pt.dmatrices(eqn, data = data)

# The exog argument permits us to include exogenous vars
model = sm.tsa.ARIMA(y, order=(1,0,0), exog=x)
modelFit = model.fit(trend='nc', method='mle', maxiter=500, solver='bfgs')
modelFit.summary()

# Create New data and new X
dataNew = pd.read_csv("https://raw.githubusercontent.com/dustywhite7/Econ8310/master/AssignmentData/assignment1test.csv")
xNew = pt.build_design_matrices([x.design_info], dataNew)

# Generating our Forecast
pred = modelFit.predict(start = len(data), end = len(data) + 743, exog=np.squeeze(np.asarray(xNew))) # Generate forecast
predimport statsmodels.api as sm
import patsy as pt
import pandas as pd
import numpy as np
import plotly.express as px
import statsmodels.tsa.stattools as st

data = pd.read_csv("https://raw.githubusercontent.com/dustywhite7/Econ8310/master/AssignmentData/assignment1.csv")

# ARIMAX
eqn = "trips ~ C(hour) + " + "day + C(month)"
        
y, x = pt.dmatrices(eqn, data = data)

# The exog argument permits us to include exogenous vars
model = sm.tsa.ARIMA(y, order=(1,0,0), exog=x)
modelFit = model.fit(trend='nc', method='mle', maxiter=500, solver='bfgs')
modelFit.summary()

# Create New data and new X
dataNew = pd.read_csv("https://raw.githubusercontent.com/dustywhite7/Econ8310/master/AssignmentData/assignment1test.csv")
xNew = pt.build_design_matrices([x.design_info], dataNew)

# Generating our Forecast
pred = modelFit.predict(start = len(data), end = len(data) + 743, exog=np.squeeze(np.asarray(xNew))) # Generate forecast
pred
